LIBRARY IEEE;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY tictactoe IS
    PORT (
        PXL_CLK             : IN STD_LOGIC;
        DISPLAY             : IN STD_LOGIC;
        X_POS, Y_POS        : IN INTEGER;
        R_OUT, G_OUT, B_OUT : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
        reset               : IN STD_LOGIC;
        output1             : OUT STD_LOGIC_VECTOR(7 DOWNTO 0) ;
        output2             : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
          );
    END tictactoe;            
  
  
  ARCHITECTURE Behavioral OF tictactoe IS
        SIGNAL inx, iny : std_logic_vector(7 DOWNTO 0) := (others=> '0');
        SIGNAL turn : std_logic := '0';
        SIGNAL winp1, winp2 : std_logic;      

	  COMPONENT keypad IS
		PORT (
			samp_ck : IN STD_LOGIC;
			value : OUT STD_LOGIC_VECTOR (3 DOWNTO 0);
			hit : OUT STD_LOGIC
      bt_clr : IN STD_LOGIC; --"clear" button
		);
	  END COMPONENT;
      SIGNAL cnt : std_logic_vector(20 DOWNTO 0);
      SIGNAL kp_clk, kp_hit, sm_clk : std_logic;
      SIGNAL nx_acc, acc : std_logic_vector (15 DOWNTO 0); -- accumulated sum
	    SIGNAL kp_value : std_logic_vector (3 DOWNTO 0);
      SIGNAL led_mpx : STD_LOGIC_VECTOR (1 DOWNTO 0); -- 7-seg multiplexing clock
      TYPE state IS (ENTER_X, X_RELEASE, ENTER_Y); -- state machine states
      SIGNAL pr_state, nx_state : state; -- present and next states

  BEGIN
  	    ck_proc : PROCESS (PXL_CLK)
	    BEGIN
		    IF rising_edge(PXL_CLK) THEN -- on rising edge of clock
			    cnt <= cnt + 1; -- increment counter
		    END IF;
	    END PROCESS;

      kp_clk <= cnt(15); -- keypad interrogation clock
    	sm_clk <= cnt(20); -- state machine clock
	    led_mpx <= cnt(18 DOWNTO 17); -- 7-seg multiplexing clock
	    kp1 : keypad
	PORT MAP(
		samp_ck => kp_clk, col => KB_col, 
		value => kp_value, hit => kp_hit
		);
sm_ck_pr : PROCESS (bt_clr, sm_clk) -- state machine clock process
		BEGIN
			IF bt_clr = '1' THEN -- reset to known state
				acc <= X"0000";
				pr_state <= ENTER_X;
			ELSIF rising_edge (sm_clk) THEN -- on rising clock edge
				pr_state <= nx_state; -- update present state
				acc <= nx_acc; -- update accumulator
			END IF;
		END PROCESS;

		CASE pr_state IS -- depending on present state...
				WHEN ENTER_X => -- waiting for next digit in 1st operand entry
					IF kp_hit = '1' THEN
						nx_acc <= acc(11 DOWNTO 0) & kp_value;
						nx_state <= X_RELEASE;
					ELSIF bt_plus = '1' THEN
						nx_state <= ENTER_Y;
					ELSE
						nx_state <= ENTER_X;
					END IF;
				WHEN X_RELEASE => -- waiting for button to be released
					IF kp_hit = '0' THEN
						nx_state <= ENTER_Y;
					ELSE nx_state <= X_RELEASE;
					END IF;
        WHEN ENTER_Y => -- waiting for next digit in 1st operand entry
					IF kp_hit = '1' THEN
						nx_acc <= acc(11 DOWNTO 0) & kp_value;
						nx_state <= X_RELEASE;
					ELSE
						nx_state <= ENTER_Y;
					END IF;
        WHEN SHOW_RESULT => -- display result of addition
					IF kp_hit = '1' THEN
						nx_acc <= X"000" & kp_value;
						nx_state <= X_RELEASE;
					ELSE nx_state <= SHOW_RESULT;
					END IF;
			END CASE;
    END PROCESS;

PROCESS(X_POS, Y_POS)
BEGIN
    IF ((X_POS > 50 AND Y_POS > 50) AND (X_POS < 800 AND Y_POS < 600)) THEN
        R_OUT <= "1111";
        G_OUT <= "1111";
        B_OUT <= "1111";
    ELSE
        R_OUT <= "0000";
        G_OUT <= "0000";
        B_OUT <= "0000";
    END IF;
END PROCESS;

PROCESS(inx, iny)
BEGIN
    IF(winp1='0' and winp2='0') THEN
      IF move (1,1) THEN
      IF (turn= '0') THEN
        output1 <= "0001";
      ELSEIF (turn= '1') THEN
        output2 <= "0001";
      END IF;
      turn <= not turn;
      
      ELSEIF move (1,2) THEN
      IF (turn= '0') THEN
        output1 <= "0010";
      ELSEIF (turn= '1') THEN
        output2 <= "0010";
      END IF;
      turn <= not turn;

      ELSEIF move (1,3) THEN
      IF (turn= '0') THEN
        output1 <= "0011";
      ELSEIF (turn= '1') THEN
        output2 <= "0011";
      END IF;
      turn <= not turn;

      ELSEIF move (2,1) THEN
      IF (turn= '0') THEN
        output1 <= "0100";
      ELSEIF (turn= '1') THEN
        output2 <= "0100";
      END IF;
      turn <= not turn;

      ELSEIF move (2,2) THEN
      IF (turn= '0') THEN
        output1 <= "0101";
      ELSEIF (turn= '1') THEN
        output2 <= "0101";
      END IF;
      turn <= not turn;

      ELSEIF move (2,3) THEN
      IF (turn= '0') THEN
        output1 <= "0110";
      ELSEIF (turn= '1') THEN
        output2 <= "0110";
      END IF;
      turn <= not turn;

      ELSEIF move (3,1) THEN
      IF (turn= '0') THEN
        output1 <= "0111";
      ELSEIF (turn= '1') THEN
        output2 <= "0111";
      END IF;
      turn <= not turn;

      ELSEIF move (3,2) THEN
      IF (turn= '0') THEN
        output1 <= "1000";
      ELSEIF (turn= '1') THEN
        output2 <= "1000";
      END IF;
      turn <= not turn;

      ELSEIF move (3,3) THEN
      IF (turn= '0') THEN
        output1 <= "1001";
      ELSEIF (turn= '1') THEN
        output2 <= "1001";
      END IF;
      turn <= not turn;
    END IF;
  END IF;

  
    IF ((output1= "0001" and output1= "0010" and output1= "0011" ) or (output1= "0100" and output1= "0101" and output1= "0110" ) or (output1= "0111" and output1= "1000" and output1= "1001" ) or (output1= "0001" and output1= "0100" and output1= "0111" ) or (output1= "0010" and output1= "0101" and output1= "1000" ) or (output1= "0011" and output1= "0110" and output1= "1001" ) or ((output1= "0001" and output1= "0101" and output1= "1001" ) or (output1= "0011" and output1= "0101" and output1= "0111" ))THEN
      winp1 <='1';
    ELSE
      winp1 <='0';
    END IF;
  
    
    IF ((output2= "0001" and output2= "0010" and output2= "0011" ) or (output2= "0100" and output2= "0101" and output2= "0110" ) or (output2= "0111" and output2= "1000" and output2= "1001" ) or (output2= "0001" and output2= "0100" and output2= "0111" ) or (output2= "0010" and output2= "0101" and output2= "1000" ) or (output2= "0011" and output2= "0110" and output2= "1001" ) or ((output2= "0001" and output2= "0101" and output2= "1001" ) or (output2= "0011" and output2= "0101" and output2= "0111" ))THEN
      winp2 <='1';
    ELSE
      winp2 <='0';
    END IF;

    END PROCESS;

END Behavioral;
